<?php

namespace ContainerMzr50d6;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Authenticator_Manager_SecuredAreaService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'security.authenticator.manager.secured_area' shared service.
     *
     * @return \Symfony\Component\Security\Http\Authentication\AuthenticatorManager
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authentication'.\DIRECTORY_SEPARATOR.'AuthenticatorManagerInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authentication'.\DIRECTORY_SEPARATOR.'UserAuthenticatorInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authentication'.\DIRECTORY_SEPARATOR.'AuthenticatorManager.php';

        $a = ($container->privates['App\\Saml\\SamlAuthenticator'] ?? $container->load('getSamlAuthenticatorService'));

        if (isset($container->privates['security.authenticator.manager.secured_area'])) {
            return $container->privates['security.authenticator.manager.secured_area'];
        }
        $b = ($container->privates['security.authenticator.two_factor.secured_area'] ?? $container->load('getSecurity_Authenticator_TwoFactor_SecuredAreaService'));

        if (isset($container->privates['security.authenticator.manager.secured_area'])) {
            return $container->privates['security.authenticator.manager.secured_area'];
        }
        $c = ($container->privates['security.authenticator.login_link.secured_area'] ?? $container->load('getSecurity_Authenticator_LoginLink_SecuredAreaService'));

        if (isset($container->privates['security.authenticator.manager.secured_area'])) {
            return $container->privates['security.authenticator.manager.secured_area'];
        }
        $d = ($container->privates['security.authenticator.kimai_ldap.secured_area'] ?? $container->load('getSecurity_Authenticator_KimaiLdap_SecuredAreaService'));

        if (isset($container->privates['security.authenticator.manager.secured_area'])) {
            return $container->privates['security.authenticator.manager.secured_area'];
        }
        $e = ($container->privates['debug.security.event_dispatcher.secured_area'] ?? self::getDebug_Security_EventDispatcher_SecuredAreaService($container));

        if (isset($container->privates['security.authenticator.manager.secured_area'])) {
            return $container->privates['security.authenticator.manager.secured_area'];
        }

        return $container->privates['security.authenticator.manager.secured_area'] = new \Symfony\Component\Security\Http\Authentication\AuthenticatorManager([$a, $b, $c, $d, ($container->privates['security.authenticator.form_login.secured_area'] ?? $container->load('getSecurity_Authenticator_FormLogin_SecuredAreaService')), ($container->privates['security.authenticator.remember_me.secured_area'] ?? $container->load('getSecurity_Authenticator_RememberMe_SecuredAreaService'))], ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), $e, 'secured_area', ($container->privates['monolog.logger.security'] ?? self::getMonolog_Logger_SecurityService($container)), true, true, []);
    }
}
