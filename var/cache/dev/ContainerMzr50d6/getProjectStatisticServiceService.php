<?php

namespace ContainerMzr50d6;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getProjectStatisticServiceService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\Project\ProjectStatisticService' shared autowired service.
     *
     * @return \App\Project\ProjectStatisticService
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Project'.\DIRECTORY_SEPARATOR.'ProjectStatisticService.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['App\\Project\\ProjectStatisticService'])) {
            return $container->privates['App\\Project\\ProjectStatisticService'];
        }

        return $container->privates['App\\Project\\ProjectStatisticService'] = new \App\Project\ProjectStatisticService(($container->privates['App\\Repository\\ProjectRepository'] ?? $container->load('getProjectRepositoryService')), ($container->privates['App\\Repository\\ActivityRepository'] ?? $container->load('getActivityRepositoryService')), ($container->privates['App\\Repository\\TimesheetRepository'] ?? $container->load('getTimesheetRepositoryService')), $a, ($container->privates['App\\Repository\\UserRepository'] ?? $container->load('getUserRepositoryService')));
    }
}
