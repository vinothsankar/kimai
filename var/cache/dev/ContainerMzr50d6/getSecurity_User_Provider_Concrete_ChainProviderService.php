<?php

namespace ContainerMzr50d6;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_User_Provider_Concrete_ChainProviderService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'security.user.provider.concrete.chain_provider' shared autowired service.
     *
     * @return \App\Security\KimaiUserProvider
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-core'.\DIRECTORY_SEPARATOR.'User'.\DIRECTORY_SEPARATOR.'UserProviderInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-core'.\DIRECTORY_SEPARATOR.'User'.\DIRECTORY_SEPARATOR.'PasswordUpgraderInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Security'.\DIRECTORY_SEPARATOR.'KimaiUserProvider.php';

        $a = ($container->privates['App\\Configuration\\SystemConfiguration'] ?? self::getSystemConfigurationService($container));

        if (isset($container->privates['security.user.provider.concrete.chain_provider'])) {
            return $container->privates['security.user.provider.concrete.chain_provider'];
        }

        return $container->privates['security.user.provider.concrete.chain_provider'] = new \App\Security\KimaiUserProvider(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['security.user.provider.concrete.kimai_internal'] ?? $container->load('getSecurity_User_Provider_Concrete_KimaiInternalService'));
            yield 1 => ($container->privates['App\\Ldap\\LdapUserProvider'] ?? $container->load('getLdapUserProviderService'));
        }, 2), $a);
    }
}
