<?php

namespace ContainerMzr50d6;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSamlAuthenticatorService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\Saml\SamlAuthenticator' shared autowired service.
     *
     * @return \App\Saml\SamlAuthenticator
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authenticator'.\DIRECTORY_SEPARATOR.'AuthenticatorInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authenticator'.\DIRECTORY_SEPARATOR.'AbstractAuthenticator.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Saml'.\DIRECTORY_SEPARATOR.'SamlAuthenticator.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authentication'.\DIRECTORY_SEPARATOR.'AuthenticationSuccessHandlerInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Util'.\DIRECTORY_SEPARATOR.'TargetPathTrait.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authentication'.\DIRECTORY_SEPARATOR.'DefaultAuthenticationSuccessHandler.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Saml'.\DIRECTORY_SEPARATOR.'Security'.\DIRECTORY_SEPARATOR.'SamlAuthenticationSuccessHandler.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authentication'.\DIRECTORY_SEPARATOR.'AuthenticationFailureHandlerInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authentication'.\DIRECTORY_SEPARATOR.'DefaultAuthenticationFailureHandler.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Saml'.\DIRECTORY_SEPARATOR.'Security'.\DIRECTORY_SEPARATOR.'SamlAuthenticationFailureHandler.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Saml'.\DIRECTORY_SEPARATOR.'SamlProvider.php';

        $a = ($container->services['http_kernel'] ?? self::getHttpKernelService($container));

        if (isset($container->privates['App\\Saml\\SamlAuthenticator'])) {
            return $container->privates['App\\Saml\\SamlAuthenticator'];
        }
        $b = ($container->privates['security.http_utils'] ?? self::getSecurity_HttpUtilsService($container));
        $c = ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container));
        $d = ($container->privates['App\\Configuration\\SamlConfiguration'] ?? $container->load('getSamlConfigurationService'));

        return $container->privates['App\\Saml\\SamlAuthenticator'] = new \App\Saml\SamlAuthenticator($b, new \App\Saml\Security\SamlAuthenticationSuccessHandler($b, [], $c), new \App\Saml\Security\SamlAuthenticationFailureHandler($a, $b, [], $c), ($container->privates['App\\Saml\\SamlAuthFactory'] ?? $container->load('getSamlAuthFactoryService')), new \App\Saml\SamlProvider(($container->privates['App\\User\\UserService'] ?? $container->load('getUserServiceService')), ($container->privates['security.user.provider.concrete.kimai_internal'] ?? $container->load('getSecurity_User_Provider_Concrete_KimaiInternalService')), $d, $c), $d);
    }
}
