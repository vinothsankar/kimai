<?php

namespace ContainerMzr50d6;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getUserLoginLinkCommandService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\Command\UserLoginLinkCommand' shared autowired service.
     *
     * @return \App\Command\UserLoginLinkCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'console'.\DIRECTORY_SEPARATOR.'Command'.\DIRECTORY_SEPARATOR.'Command.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Command'.\DIRECTORY_SEPARATOR.'UserLoginLinkCommand.php';

        $container->privates['App\\Command\\UserLoginLinkCommand'] = $instance = new \App\Command\UserLoginLinkCommand(($container->privates['security.authenticator.firewall_aware_login_link_handler'] ?? $container->load('getSecurity_Authenticator_FirewallAwareLoginLinkHandlerService')), ($container->privates['App\\Repository\\UserRepository'] ?? $container->load('getUserRepositoryService')), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));

        $instance->setName('kimai:user:login-link');
        $instance->setHidden(true);
        $instance->setDescription('Create a URL that can be used to login as that user');

        return $instance;
    }
}
