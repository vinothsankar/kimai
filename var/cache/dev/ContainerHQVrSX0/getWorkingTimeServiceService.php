<?php

namespace ContainerHQVrSX0;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getWorkingTimeServiceService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\WorkingTime\WorkingTimeService' shared autowired service.
     *
     * @return \App\WorkingTime\WorkingTimeService
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'WorkingTime'.\DIRECTORY_SEPARATOR.'WorkingTimeService.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Repository'.\DIRECTORY_SEPARATOR.'WorkingTimeRepository.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['App\\WorkingTime\\WorkingTimeService'])) {
            return $container->privates['App\\WorkingTime\\WorkingTimeService'];
        }

        return $container->privates['App\\WorkingTime\\WorkingTimeService'] = new \App\WorkingTime\WorkingTimeService(($container->privates['App\\Repository\\TimesheetRepository'] ?? $container->load('getTimesheetRepositoryService')), ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container))->getRepository('App\\Entity\\WorkingTime'), $a, ($container->privates['App\\WorkingTime\\Mode\\WorkingTimeModeFactory'] ?? $container->load('getWorkingTimeModeFactoryService')), ($container->privates['App\\Repository\\UserRepository'] ?? $container->load('getUserRepositoryService')));
    }
}
