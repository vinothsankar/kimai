<?php

namespace ContainerHQVrSX0;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Authenticator_KimaiLdap_SecuredAreaService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'security.authenticator.kimai_ldap.secured_area' shared service.
     *
     * @return \App\Ldap\LdapAuthenticator
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'EntryPoint'.\DIRECTORY_SEPARATOR.'AuthenticationEntryPointInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authenticator'.\DIRECTORY_SEPARATOR.'AuthenticatorInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authenticator'.\DIRECTORY_SEPARATOR.'InteractiveAuthenticatorInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Ldap'.\DIRECTORY_SEPARATOR.'LdapAuthenticator.php';

        $a = ($container->privates['security.authenticator.form_login.secured_area'] ?? $container->load('getSecurity_Authenticator_FormLogin_SecuredAreaService'));

        if (isset($container->privates['security.authenticator.kimai_ldap.secured_area'])) {
            return $container->privates['security.authenticator.kimai_ldap.secured_area'];
        }

        return $container->privates['security.authenticator.kimai_ldap.secured_area'] = new \App\Ldap\LdapAuthenticator($a, ($container->privates['App\\Configuration\\LdapConfiguration'] ?? $container->load('getLdapConfigurationService')), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)));
    }
}
