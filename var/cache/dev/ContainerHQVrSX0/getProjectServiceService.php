<?php

namespace ContainerHQVrSX0;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getProjectServiceService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\Project\ProjectService' shared autowired service.
     *
     * @return \App\Project\ProjectService
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Project'.\DIRECTORY_SEPARATOR.'ProjectService.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['App\\Project\\ProjectService'])) {
            return $container->privates['App\\Project\\ProjectService'];
        }
        $b = ($container->privates['debug.validator'] ?? self::getDebug_ValidatorService($container));

        if (isset($container->privates['App\\Project\\ProjectService'])) {
            return $container->privates['App\\Project\\ProjectService'];
        }

        return $container->privates['App\\Project\\ProjectService'] = new \App\Project\ProjectService(($container->privates['App\\Repository\\ProjectRepository'] ?? $container->load('getProjectRepositoryService')), ($container->privates['App\\Configuration\\SystemConfiguration'] ?? self::getSystemConfigurationService($container)), $a, $b);
    }
}
